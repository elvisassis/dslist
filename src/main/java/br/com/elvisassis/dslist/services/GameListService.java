package br.com.elvisassis.dslist.services;import br.com.elvisassis.dslist.dto.GameListDTO;import br.com.elvisassis.dslist.entities.GameList;import br.com.elvisassis.dslist.execptions.RecordNotFoundException;import br.com.elvisassis.dslist.repositories.GameListRepository;import br.com.elvisassis.dslist.repositories.GameRepository;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class GameListService {  private final GameListRepository repository;  private final GameRepository gameRepository;  public GameListService(GameListRepository repository, GameRepository gameRepository) {    this.repository = repository;    this.gameRepository = gameRepository;  }  @Transactional(readOnly = true)  public List<GameListDTO> findAll() {    var result = repository.findAll();    return result.stream()            .map(gameList -> gameList.toDto(gameList)).toList();  }  @Transactional(readOnly = true)  public GameListDTO findById(Long id) {    var result = repository.findById(id).orElseThrow(()-> new RecordNotFoundException());    return result.toDto(result);  }  @Transactional  public void move(Long listId, int sourceIndex, int destinationIndex) {        var list = gameRepository.searchByList(listId);        var game = list.remove(sourceIndex);        list.add(destinationIndex, game);        int min = Math.min(sourceIndex, destinationIndex);        int max = Math.max(sourceIndex, destinationIndex);//        int min = sourceIndex < destinationIndex ? sourceIndex : destinationIndex;//        int max = sourceIndex < destinationIndex ? destinationIndex : sourceIndex;        for (int i = min; i < max; i++) {            repository.updateBelongingPosition(listId, list.get(i).getId(), i);        }  }}